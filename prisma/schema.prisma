// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum Role {
  USER
  ADMIN
  CREATOR
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE")
  relationMode = "prisma"
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
  @@index([createdById])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  createdEvents Event[]
  adminFor      Org       @relation(fields: [adminForOrgId], references: [id])
  adminForOrgId Int

  @@index([email])
  @@index([name])
  @@index([id])
  @@index([adminForOrgId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id                  Int      @id @default(autoincrement())
  name                String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  title               String
  headline            String?
  category            String?
  heroImage           String
  startDateTime       DateTime
  private             Boolean  @default(false)
  active              Boolean  @default(true)
  ticketStartingPrice Int
  location            String
  adultOnly           Boolean  @default(false)

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  createdByEmail String

  eventDescription String
  length           Int
  capacity         Int?

  ticketTypes TicketType[]
  Org         Org?         @relation(fields: [orgId], references: [id])
  orgId       Int?

  @@index([createdById])
  @@index([id])
  @@index([title])
  @@index([orgId])
}

model TicketType {
  id            Int     @id @default(autoincrement())
  name          String
  price         Int
  paymentOweing Boolean @default(false)
  event         Event   @relation(fields: [eventId], references: [id])
  eventId       Int

  ticketDescription Json

  drinksIncluded Boolean @default(false)
  foodIncluded   Boolean @default(false)

  @@index([eventId])
  @@index([id])
}

model Org {
  id          Int     @id @unique @default(autoincrement())
  name        String  @unique
  description String
  admins      User[]
  events      Event[]
}
