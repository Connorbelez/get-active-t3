// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum Role {
  USER
  ADMIN
  CREATOR
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE")
  relationMode = "prisma"
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   createdBy   User   @relation(fields: [createdById], references: [id])
//   createdById String

//   @@index([name])
//   @@index([createdById])
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([id])
}

model FeaturedEvent {
  id        String   @id @unique @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  title               String
  headline            String?
  category            String?
  heroImage           String
  startDate           String
  startTime           String
  private             Boolean  @default(false)
  active              Boolean  @default(true)
  archived            Boolean  @default(false)
  ticketStartingPrice Int
  location            String
  address             String
  postalCode          String?
  province            String?
  city                String?
  country             String?
  latlng              String?
  lat                 Float?
  lng                 Float?
  adultOnly           Boolean  @default(false)
  drinksIncluded      Boolean  @default(false)
  foodIncluded        Boolean  @default(false)
  createdBy           User?     @relation(fields: [createdById], references: [id])
  createdById         String?

  createdByEmail String

  eventDescription String @db.LongText
  length           Int
  capacity         Int?

  ticketTypes TicketType[]
  Org         Org?         @relation(fields: [orgId], references: [id])
  orgId       String?

  ticketSales   FulfilledTicket[]
  FeaturedEvent FeaturedEvent[]
  SavedEvent    SavedEvent?

  @@index([createdById])
  @@index([id])
  @@index([title])
  @@index([orgId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  picture       String?
  stripeEmail   String?

  tickets       FulfilledTicket[]
  accounts      Account[]
  sessions      Session[]
  // posts         Post[]
  createdEvents Event[]
  adminFor      Org?              @relation(fields: [adminForOrgId], references: [id])
  adminForOrgId String?
  savedEvents   SavedEvent[]

  @@index([email])
  @@index([name])
  @@index([id])
  @@index([adminForOrgId])
}

model SavedEvent {
  id String @id @unique @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([eventId])
  @@index([id])
}

model FulfilledTicket {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  ticket   TicketType @relation(fields: [ticketId], references: [id])
  ticketId String

  stripeTransaction   StripeTransaction? @relation(fields: [stripeTransactionId], references: [id])
  stripeTransactionId String?

  quantity Int
  price    Int
  paid     Boolean @default(false)


  @@index([stripeTransactionId])
  @@index([userId])
  @@index([eventId])
  @@index([ticketId])
  @@index([id])
}

model StripeTransaction {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerEmail String

  userEmail   String?

  userId String?

  userName String?

  customerName String?

  stripeProductId String

  stripeChargeId String

  ticketId String?

  stripePriceId String 

  customerMetadata Json?

  productMetadata Json?

  checkoutMetadata Json?

  stripeCustomerId String?

  checkoutSessionId String?

  receiptUrl String?

  quantity        Int               @default(1)
  price           Int
  paid            Boolean           @default(false)
  FulfilledTicket FulfilledTicket[]

  @@index([userEmail])
  @@index([ticketId])
  @@index([stripePriceId])


}

model TicketType {
  id                String  @id @default(cuid())
  name              String  @default("Ticket")
  price             Int
  paymentOweing     Boolean @default(false)
  event             Event   @relation(fields: [eventId], references: [id])
  eventId           String
  payAtDoorTicket      Boolean @default(false)
  ticketDescription Json
  paymentTypes      String
  drinksIncluded    Boolean @default(false)
  foodIncluded      Boolean @default(false)
  logo              String
  stripePriceId     String? @unique

  fulfilledTickets FulfilledTicket[]

  @@index([stripePriceId])
  @@index([eventId])
  @@index([id])
}

model Org {
  id          String  @id @unique @default(cuid())
  name        String  @unique
  description String
  admins      User[]
  events      Event[]
}
